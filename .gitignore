#include <bits/stdc++.h>
using namespace std;

struct Process_Data
{
	int Num;
	int P_id;  //Process Id
	int Arrival; //Process Arrival Time
	int Burst; //Process Bruest Time
	int Priority; //Process Priority
	int Finish; //Process Finish Time
	int Remaining; //Process Remaining  Time During Execution
	int Waiting; //Waiting Time
	int Start; //Process start Time
	int Res_time;

};

struct Process_Data current;
typedef struct Process_Data P_d ;

bool idsort(const P_d& x , const P_d& y)
{
	return x.P_id < y.P_id;
}
/** Sorting on the base of arrival time if that match then on Priority of Priority also  match than on the base of Process Id**/
bool arrivalsort( const P_d& x ,const P_d& y)
{
	if(x.Arrival < y.arrival)
		return true;
	else if(x.Arrival > y.Arrival)
		return false;
	if(x.Priority < y.Priority)
		return true;
	else if(x.Priority > y.Priority)
		return false;
	if(x.P_id < y.P_id)
		return true;

	return false;
}


bool Numsort( const P_d& x ,const P_d& y)
{
	return x.Num < y.Num;
}
/*Sorting on the base of Priority if that same then on the base of P_ID*/
struct comPare
{
	bool operator()(const P_d& x ,const P_d& y)
	{
		if( x.Priority > y.Priority )
			return true;
		else if( x.Priority < y.Priority )
			return false;
		if( x.P_id > y.P_id )
			return true;

		return false;
		
	}
	
};
/**To check the Input **/
void my_check(vector<P_d> mv)
{
	for(unsigned int i= 0; i < mv.size() ;i++)
	{
		cout<<" P_id :"<<mv[i].P_id<<" Arrival : "<<mv[i].Arrival<<" Burst : "<<mv[i].Burst<<" Priority : "
		<<mv[i].Priority<<endl;
	}

}
int main()
{
	int i;
	vector< P_d > input;
	vector<P_d> input_copy;
	P_d temp;
	int pq_process = 0; // for PQ process
	int rq_process = 0; // for RQ process
	int Arrival;
	int Burst;
	int P_id;
	int Priority;
	int n;
	int clock;
	int total_exection_time = 0;
	cin>>n;
	for( i= 0; i< n; i++ )
	{
		cin>>P_id>>Arrival>>Burst>>Priority;
		temp.Num = i+1;
		temp.Arrival = Arrival;
		temp.Burst = Burst;
		temp.Remaining = Burst;
		temp.Pid = Pid;
		temp.Priority = Priority;
		input.push_back(temp);
	}
}
